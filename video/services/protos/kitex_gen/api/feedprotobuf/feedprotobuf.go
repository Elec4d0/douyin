// Code generated by Kitex v0.6.2. DO NOT EDIT.

package feedprotobuf

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	api "video/services/protos/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedProtoBufServiceInfo
}

var feedProtoBufServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "feed_protoBuf"
	handlerType := (*api.FeedProtoBuf)(nil)
	methods := map[string]kitex.MethodInfo{
		"getFeed":            kitex.NewMethodInfo(getFeedHandler, newGetFeedArgs, newGetFeedResult, false),
		"publishVideo":       kitex.NewMethodInfo(publishVideoHandler, newPublishVideoArgs, newPublishVideoResult, false),
		"getAuthorVideoList": kitex.NewMethodInfo(getAuthorVideoListHandler, newGetAuthorVideoListArgs, newGetAuthorVideoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.FeedProtoBuf).GetFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedArgs:
		success, err := handler.(api.FeedProtoBuf).GetFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedArgs() interface{} {
	return &GetFeedArgs{}
}

func newGetFeedResult() interface{} {
	return &GetFeedResult{}
}

type GetFeedArgs struct {
	Req *api.DouyinFeedRequest
}

func (p *GetFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedArgs) Unmarshal(in []byte) error {
	msg := new(api.DouyinFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedArgs_Req_DEFAULT *api.DouyinFeedRequest

func (p *GetFeedArgs) GetReq() *api.DouyinFeedRequest {
	if !p.IsSetReq() {
		return GetFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFeedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFeedResult struct {
	Success *api.DouyinFeedResponse
}

var GetFeedResult_Success_DEFAULT *api.DouyinFeedResponse

func (p *GetFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedResult) Unmarshal(in []byte) error {
	msg := new(api.DouyinFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedResult) GetSuccess() *api.DouyinFeedResponse {
	if !p.IsSetSuccess() {
		return GetFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinFeedResponse)
}

func (p *GetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFeedResult) GetResult() interface{} {
	return p.Success
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinPublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.FeedProtoBuf).PublishVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishVideoArgs:
		success, err := handler.(api.FeedProtoBuf).PublishVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishVideoResult)
		realResult.Success = success
	}
	return nil
}
func newPublishVideoArgs() interface{} {
	return &PublishVideoArgs{}
}

func newPublishVideoResult() interface{} {
	return &PublishVideoResult{}
}

type PublishVideoArgs struct {
	Req *api.DouyinPublishActionRequest
}

func (p *PublishVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinPublishActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishVideoArgs) Unmarshal(in []byte) error {
	msg := new(api.DouyinPublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishVideoArgs_Req_DEFAULT *api.DouyinPublishActionRequest

func (p *PublishVideoArgs) GetReq() *api.DouyinPublishActionRequest {
	if !p.IsSetReq() {
		return PublishVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PublishVideoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PublishVideoResult struct {
	Success *api.DouyinPublishActionResponse
}

var PublishVideoResult_Success_DEFAULT *api.DouyinPublishActionResponse

func (p *PublishVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinPublishActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishVideoResult) Unmarshal(in []byte) error {
	msg := new(api.DouyinPublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishVideoResult) GetSuccess() *api.DouyinPublishActionResponse {
	if !p.IsSetSuccess() {
		return PublishVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinPublishActionResponse)
}

func (p *PublishVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PublishVideoResult) GetResult() interface{} {
	return p.Success
}

func getAuthorVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinPublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.FeedProtoBuf).GetAuthorVideoList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAuthorVideoListArgs:
		success, err := handler.(api.FeedProtoBuf).GetAuthorVideoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAuthorVideoListResult)
		realResult.Success = success
	}
	return nil
}
func newGetAuthorVideoListArgs() interface{} {
	return &GetAuthorVideoListArgs{}
}

func newGetAuthorVideoListResult() interface{} {
	return &GetAuthorVideoListResult{}
}

type GetAuthorVideoListArgs struct {
	Req *api.DouyinPublishListRequest
}

func (p *GetAuthorVideoListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinPublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAuthorVideoListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAuthorVideoListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAuthorVideoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAuthorVideoListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAuthorVideoListArgs) Unmarshal(in []byte) error {
	msg := new(api.DouyinPublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAuthorVideoListArgs_Req_DEFAULT *api.DouyinPublishListRequest

func (p *GetAuthorVideoListArgs) GetReq() *api.DouyinPublishListRequest {
	if !p.IsSetReq() {
		return GetAuthorVideoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAuthorVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAuthorVideoListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAuthorVideoListResult struct {
	Success *api.DouyinPublishListResponse
}

var GetAuthorVideoListResult_Success_DEFAULT *api.DouyinPublishListResponse

func (p *GetAuthorVideoListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinPublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAuthorVideoListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAuthorVideoListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAuthorVideoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAuthorVideoListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAuthorVideoListResult) Unmarshal(in []byte) error {
	msg := new(api.DouyinPublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAuthorVideoListResult) GetSuccess() *api.DouyinPublishListResponse {
	if !p.IsSetSuccess() {
		return GetAuthorVideoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAuthorVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinPublishListResponse)
}

func (p *GetAuthorVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAuthorVideoListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, Req *api.DouyinFeedRequest) (r *api.DouyinFeedResponse, err error) {
	var _args GetFeedArgs
	_args.Req = Req
	var _result GetFeedResult
	if err = p.c.Call(ctx, "getFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, Req *api.DouyinPublishActionRequest) (r *api.DouyinPublishActionResponse, err error) {
	var _args PublishVideoArgs
	_args.Req = Req
	var _result PublishVideoResult
	if err = p.c.Call(ctx, "publishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthorVideoList(ctx context.Context, Req *api.DouyinPublishListRequest) (r *api.DouyinPublishListResponse, err error) {
	var _args GetAuthorVideoListArgs
	_args.Req = Req
	var _result GetAuthorVideoListResult
	if err = p.c.Call(ctx, "getAuthorVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
