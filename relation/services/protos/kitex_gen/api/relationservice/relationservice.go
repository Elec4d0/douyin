// Code generated by Kitex v0.7.0. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	api "relation/services/protos/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*api.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":       kitex.NewMethodInfo(relationActionHandler, newRelationActionArgs, newRelationActionResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newRelationFollowListArgs, newRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newRelationFollowerListArgs, newRelationFollowerListResult, false),
		"RelationFriendList":   kitex.NewMethodInfo(relationFriendListHandler, newRelationFriendListArgs, newRelationFriendListResult, false),
		"GetOneRelation":       kitex.NewMethodInfo(getOneRelationHandler, newGetOneRelationArgs, newGetOneRelationResult, false),
		"GetListRelation":      kitex.NewMethodInfo(getListRelationHandler, newGetListRelationArgs, newGetListRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).RelationAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationActionArgs:
		success, err := handler.(api.RelationService).RelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationActionResult)
		realResult.Success = success
	}
	return nil
}
func newRelationActionArgs() interface{} {
	return &RelationActionArgs{}
}

func newRelationActionResult() interface{} {
	return &RelationActionResult{}
}

type RelationActionArgs struct {
	Req *api.DouyinRelationActionRequest
}

func (p *RelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationActionArgs_Req_DEFAULT *api.DouyinRelationActionRequest

func (p *RelationActionArgs) GetReq() *api.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return RelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationActionResult struct {
	Success *api.DouyinRelationActionResponse
}

var RelationActionResult_Success_DEFAULT *api.DouyinRelationActionResponse

func (p *RelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationActionResult) GetSuccess() *api.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationActionResponse)
}

func (p *RelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationActionResult) GetResult() interface{} {
	return p.Success
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).RelationFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationFollowListArgs:
		success, err := handler.(api.RelationService).RelationFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newRelationFollowListArgs() interface{} {
	return &RelationFollowListArgs{}
}

func newRelationFollowListResult() interface{} {
	return &RelationFollowListResult{}
}

type RelationFollowListArgs struct {
	Req *api.DouyinRelationFollowListRequest
}

func (p *RelationFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationFollowListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationFollowListArgs_Req_DEFAULT *api.DouyinRelationFollowListRequest

func (p *RelationFollowListArgs) GetReq() *api.DouyinRelationFollowListRequest {
	if !p.IsSetReq() {
		return RelationFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationFollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationFollowListResult struct {
	Success *api.DouyinRelationFollowListResponse
}

var RelationFollowListResult_Success_DEFAULT *api.DouyinRelationFollowListResponse

func (p *RelationFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationFollowListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationFollowListResult) GetSuccess() *api.DouyinRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return RelationFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationFollowListResponse)
}

func (p *RelationFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationFollowListResult) GetResult() interface{} {
	return p.Success
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).RelationFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationFollowerListArgs:
		success, err := handler.(api.RelationService).RelationFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newRelationFollowerListArgs() interface{} {
	return &RelationFollowerListArgs{}
}

func newRelationFollowerListResult() interface{} {
	return &RelationFollowerListResult{}
}

type RelationFollowerListArgs struct {
	Req *api.DouyinRelationFollowerListRequest
}

func (p *RelationFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationFollowerListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationFollowerListArgs_Req_DEFAULT *api.DouyinRelationFollowerListRequest

func (p *RelationFollowerListArgs) GetReq() *api.DouyinRelationFollowerListRequest {
	if !p.IsSetReq() {
		return RelationFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationFollowerListResult struct {
	Success *api.DouyinRelationFollowerListResponse
}

var RelationFollowerListResult_Success_DEFAULT *api.DouyinRelationFollowerListResponse

func (p *RelationFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationFollowerListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationFollowerListResult) GetSuccess() *api.DouyinRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return RelationFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationFollowerListResponse)
}

func (p *RelationFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationFollowerListResult) GetResult() interface{} {
	return p.Success
}

func relationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).RelationFriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationFriendListArgs:
		success, err := handler.(api.RelationService).RelationFriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationFriendListResult)
		realResult.Success = success
	}
	return nil
}
func newRelationFriendListArgs() interface{} {
	return &RelationFriendListArgs{}
}

func newRelationFriendListResult() interface{} {
	return &RelationFriendListResult{}
}

type RelationFriendListArgs struct {
	Req *api.DouyinRelationFriendListRequest
}

func (p *RelationFriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationFriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationFriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationFriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationFriendListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationFriendListArgs_Req_DEFAULT *api.DouyinRelationFriendListRequest

func (p *RelationFriendListArgs) GetReq() *api.DouyinRelationFriendListRequest {
	if !p.IsSetReq() {
		return RelationFriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationFriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationFriendListResult struct {
	Success *api.DouyinRelationFriendListResponse
}

var RelationFriendListResult_Success_DEFAULT *api.DouyinRelationFriendListResponse

func (p *RelationFriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationFriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationFriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationFriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationFriendListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationFriendListResult) GetSuccess() *api.DouyinRelationFriendListResponse {
	if !p.IsSetSuccess() {
		return RelationFriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationFriendListResponse)
}

func (p *RelationFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationFriendListResult) GetResult() interface{} {
	return p.Success
}

func getOneRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationSearchRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).GetOneRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetOneRelationArgs:
		success, err := handler.(api.RelationService).GetOneRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOneRelationResult)
		realResult.Success = success
	}
	return nil
}
func newGetOneRelationArgs() interface{} {
	return &GetOneRelationArgs{}
}

func newGetOneRelationResult() interface{} {
	return &GetOneRelationResult{}
}

type GetOneRelationArgs struct {
	Req *api.DouyinRelationSearchRequest
}

func (p *GetOneRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationSearchRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOneRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOneRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOneRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOneRelationArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationSearchRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOneRelationArgs_Req_DEFAULT *api.DouyinRelationSearchRequest

func (p *GetOneRelationArgs) GetReq() *api.DouyinRelationSearchRequest {
	if !p.IsSetReq() {
		return GetOneRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOneRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOneRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOneRelationResult struct {
	Success *api.DouyinRelationSearchResponse
}

var GetOneRelationResult_Success_DEFAULT *api.DouyinRelationSearchResponse

func (p *GetOneRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationSearchResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOneRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOneRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOneRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOneRelationResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationSearchResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOneRelationResult) GetSuccess() *api.DouyinRelationSearchResponse {
	if !p.IsSetSuccess() {
		return GetOneRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOneRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationSearchResponse)
}

func (p *GetOneRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOneRelationResult) GetResult() interface{} {
	return p.Success
}

func getListRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.DouyinRelationSearchListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.RelationService).GetListRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetListRelationArgs:
		success, err := handler.(api.RelationService).GetListRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetListRelationResult)
		realResult.Success = success
	}
	return nil
}
func newGetListRelationArgs() interface{} {
	return &GetListRelationArgs{}
}

func newGetListRelationResult() interface{} {
	return &GetListRelationResult{}
}

type GetListRelationArgs struct {
	Req *api.DouyinRelationSearchListRequest
}

func (p *GetListRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.DouyinRelationSearchListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetListRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetListRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetListRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetListRelationArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationSearchListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetListRelationArgs_Req_DEFAULT *api.DouyinRelationSearchListRequest

func (p *GetListRelationArgs) GetReq() *api.DouyinRelationSearchListRequest {
	if !p.IsSetReq() {
		return GetListRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetListRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetListRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetListRelationResult struct {
	Success *api.DouyinRelationSearchListResponse
}

var GetListRelationResult_Success_DEFAULT *api.DouyinRelationSearchListResponse

func (p *GetListRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.DouyinRelationSearchListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetListRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetListRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetListRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetListRelationResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(api.DouyinRelationSearchListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetListRelationResult) GetSuccess() *api.DouyinRelationSearchListResponse {
	if !p.IsSetSuccess() {
		return GetListRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetListRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.DouyinRelationSearchListResponse)
}

func (p *GetListRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetListRelationResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, Req *api.DouyinRelationActionRequest) (r *api.DouyinRelationActionResponse, err error) {
	var _args RelationActionArgs
	_args.Req = Req
	var _result RelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, Req *api.DouyinRelationFollowListRequest) (r *api.DouyinRelationFollowListResponse, err error) {
	var _args RelationFollowListArgs
	_args.Req = Req
	var _result RelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, Req *api.DouyinRelationFollowerListRequest) (r *api.DouyinRelationFollowerListResponse, err error) {
	var _args RelationFollowerListArgs
	_args.Req = Req
	var _result RelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFriendList(ctx context.Context, Req *api.DouyinRelationFriendListRequest) (r *api.DouyinRelationFriendListResponse, err error) {
	var _args RelationFriendListArgs
	_args.Req = Req
	var _result RelationFriendListResult
	if err = p.c.Call(ctx, "RelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOneRelation(ctx context.Context, Req *api.DouyinRelationSearchRequest) (r *api.DouyinRelationSearchResponse, err error) {
	var _args GetOneRelationArgs
	_args.Req = Req
	var _result GetOneRelationResult
	if err = p.c.Call(ctx, "GetOneRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetListRelation(ctx context.Context, Req *api.DouyinRelationSearchListRequest) (r *api.DouyinRelationSearchListResponse, err error) {
	var _args GetListRelationArgs
	_args.Req = Req
	var _result GetListRelationResult
	if err = p.c.Call(ctx, "GetListRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
