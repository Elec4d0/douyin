// Code generated by Kitex v0.6.2. DO NOT EDIT.

package usermodelservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api 	"user/userModelAPI/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateBaseUser(ctx context.Context, Req *api.DouyinUserCreateBaseUserRequest, callOptions ...callopt.Option) (r *api.DouyinUserCreateBaseUserResponse, err error)
	FindBaseUserByName(ctx context.Context, Req *api.DouyinUserFindBaseUserByNameRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserByNameResponse, err error)
	FindBaseUserById(ctx context.Context, Req *api.DouyinUserFindBaseUserByIdRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserByIdResponse, err error)
	FindBaseUserList(ctx context.Context, Req *api.DouyinUserFindBaseUserListRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserListResponse, err error)
	FindBaseUserPassword(ctx context.Context, Req *api.DouyinUserFindBaseUserPasswordRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserPasswordResponse, err error)
	FindIDByName(ctx context.Context, Req *api.DouyinUserFindIdByNameRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindIdByNameResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserModelServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserModelServiceClient struct {
	*kClient
}

func (p *kUserModelServiceClient) CreateBaseUser(ctx context.Context, Req *api.DouyinUserCreateBaseUserRequest, callOptions ...callopt.Option) (r *api.DouyinUserCreateBaseUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateBaseUser(ctx, Req)
}

func (p *kUserModelServiceClient) FindBaseUserByName(ctx context.Context, Req *api.DouyinUserFindBaseUserByNameRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserByNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindBaseUserByName(ctx, Req)
}

func (p *kUserModelServiceClient) FindBaseUserById(ctx context.Context, Req *api.DouyinUserFindBaseUserByIdRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindBaseUserById(ctx, Req)
}

func (p *kUserModelServiceClient) FindBaseUserList(ctx context.Context, Req *api.DouyinUserFindBaseUserListRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindBaseUserList(ctx, Req)
}

func (p *kUserModelServiceClient) FindBaseUserPassword(ctx context.Context, Req *api.DouyinUserFindBaseUserPasswordRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindBaseUserPasswordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindBaseUserPassword(ctx, Req)
}

func (p *kUserModelServiceClient) FindIDByName(ctx context.Context, Req *api.DouyinUserFindIdByNameRequest, callOptions ...callopt.Option) (r *api.DouyinUserFindIdByNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindIDByName(ctx, Req)
}
