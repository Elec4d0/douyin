syntax = "proto3";
package services;
option go_package = "api";

service UserModelService {
  // 服务端侧 streaming
  rpc CreateBaseUser(douyin_user_create_base_user_request) returns (douyin_user_create_base_user_response) {};
  rpc FindBaseUserByName(douyin_user_find_base_user_by_name_request) returns (douyin_user_find_base_user_by_name_response) {};
  rpc FindBaseUserById(douyin_user_find_base_user_by_id_request) returns (douyin_user_find_base_user_by_id_response) {};
  rpc FindBaseUserList(douyin_user_find_base_user_list_request) returns (douyin_user_find_base_user_list_response) {};
}

message douyin_user_create_base_user_request {
  string username = 1; // 注册用户名，最长32个字符
  string password = 2; // 密码，最长32个字符
}

message douyin_user_create_base_user_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  int64 user_id = 3; // 用户id
}

message douyin_user_find_base_user_by_name_request {
  string username = 1; // 登录用户名
}

message douyin_user_find_base_user_by_name_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  BaseUser base_user = 3; // 用户信息
}

message douyin_user_find_base_user_by_id_request {
  int64 user_id = 1; // 用户id
}

message douyin_user_find_base_user_by_id_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  BaseUser base_user = 3; // 用户信息
}

message douyin_user_find_base_user_list_request {
  repeated int64 author_id = 2; //作者id
}

message douyin_user_find_base_user_list_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  repeated BaseUser base_user = 3; // 用户信息
}

message BaseUser {
  int64 id = 1; // 用户id
  string name = 2; // 用户名称
  optional string avatar = 3; //用户头像
  optional string background_image = 4; //用户个人页顶部大图
  optional string signature = 5; //个人简介
}