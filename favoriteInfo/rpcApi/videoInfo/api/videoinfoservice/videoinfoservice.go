// Code generated by Kitex v0.6.2. DO NOT EDIT.

package videoinfoservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	api "favoriteInfo/rpcApi/videoInfo/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoInfoServiceServiceInfo
}

var videoInfoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "videoInfoService"
	handlerType := (*api.VideoInfoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getVideoInfoList":       kitex.NewMethodInfo(getVideoInfoListHandler, newGetVideoInfoListArgs, newGetVideoInfoListResult, false),
		"getVideoInfo":           kitex.NewMethodInfo(getVideoInfoHandler, newGetVideoInfoArgs, newGetVideoInfoResult, false),
		"getFeed":                kitex.NewMethodInfo(getFeedHandler, newGetFeedArgs, newGetFeedResult, false),
		"getAuthorVideoInfoList": kitex.NewMethodInfo(getAuthorVideoInfoListHandler, newGetAuthorVideoInfoListArgs, newGetAuthorVideoInfoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func getVideoInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.VideoInfoGetVideoInfoListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.VideoInfoService).GetVideoInfoList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoInfoListArgs:
		success, err := handler.(api.VideoInfoService).GetVideoInfoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoInfoListResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoInfoListArgs() interface{} {
	return &GetVideoInfoListArgs{}
}

func newGetVideoInfoListResult() interface{} {
	return &GetVideoInfoListResult{}
}

type GetVideoInfoListArgs struct {
	Req *api.VideoInfoGetVideoInfoListRequest
}

func (p *GetVideoInfoListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.VideoInfoGetVideoInfoListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoInfoListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoInfoListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoInfoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoInfoListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoInfoListArgs) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetVideoInfoListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoInfoListArgs_Req_DEFAULT *api.VideoInfoGetVideoInfoListRequest

func (p *GetVideoInfoListArgs) GetReq() *api.VideoInfoGetVideoInfoListRequest {
	if !p.IsSetReq() {
		return GetVideoInfoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoInfoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoInfoListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoInfoListResult struct {
	Success *api.VideoInfoGetVideoInfoListResponse
}

var GetVideoInfoListResult_Success_DEFAULT *api.VideoInfoGetVideoInfoListResponse

func (p *GetVideoInfoListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.VideoInfoGetVideoInfoListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoInfoListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoInfoListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoInfoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoInfoListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoInfoListResult) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetVideoInfoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoInfoListResult) GetSuccess() *api.VideoInfoGetVideoInfoListResponse {
	if !p.IsSetSuccess() {
		return GetVideoInfoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoInfoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.VideoInfoGetVideoInfoListResponse)
}

func (p *GetVideoInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoInfoListResult) GetResult() interface{} {
	return p.Success
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.VideoInfoGetVideoInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.VideoInfoService).GetVideoInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoInfoArgs:
		success, err := handler.(api.VideoInfoService).GetVideoInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoInfoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoInfoArgs() interface{} {
	return &GetVideoInfoArgs{}
}

func newGetVideoInfoResult() interface{} {
	return &GetVideoInfoResult{}
}

type GetVideoInfoArgs struct {
	Req *api.VideoInfoGetVideoInfoRequest
}

func (p *GetVideoInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.VideoInfoGetVideoInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoInfoArgs) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetVideoInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoInfoArgs_Req_DEFAULT *api.VideoInfoGetVideoInfoRequest

func (p *GetVideoInfoArgs) GetReq() *api.VideoInfoGetVideoInfoRequest {
	if !p.IsSetReq() {
		return GetVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoInfoResult struct {
	Success *api.VideoInfoGetVideoInfoResponse
}

var GetVideoInfoResult_Success_DEFAULT *api.VideoInfoGetVideoInfoResponse

func (p *GetVideoInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.VideoInfoGetVideoInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoInfoResult) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetVideoInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoInfoResult) GetSuccess() *api.VideoInfoGetVideoInfoResponse {
	if !p.IsSetSuccess() {
		return GetVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.VideoInfoGetVideoInfoResponse)
}

func (p *GetVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoInfoResult) GetResult() interface{} {
	return p.Success
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.VideoInfoGetFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.VideoInfoService).GetFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedArgs:
		success, err := handler.(api.VideoInfoService).GetFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedArgs() interface{} {
	return &GetFeedArgs{}
}

func newGetFeedResult() interface{} {
	return &GetFeedResult{}
}

type GetFeedArgs struct {
	Req *api.VideoInfoGetFeedRequest
}

func (p *GetFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.VideoInfoGetFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedArgs) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedArgs_Req_DEFAULT *api.VideoInfoGetFeedRequest

func (p *GetFeedArgs) GetReq() *api.VideoInfoGetFeedRequest {
	if !p.IsSetReq() {
		return GetFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFeedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFeedResult struct {
	Success *api.VideoInfoGetFeedResponse
}

var GetFeedResult_Success_DEFAULT *api.VideoInfoGetFeedResponse

func (p *GetFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.VideoInfoGetFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedResult) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedResult) GetSuccess() *api.VideoInfoGetFeedResponse {
	if !p.IsSetSuccess() {
		return GetFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.VideoInfoGetFeedResponse)
}

func (p *GetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFeedResult) GetResult() interface{} {
	return p.Success
}

func getAuthorVideoInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.VideoInfoGetAuthorVideoInfoListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.VideoInfoService).GetAuthorVideoInfoList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAuthorVideoInfoListArgs:
		success, err := handler.(api.VideoInfoService).GetAuthorVideoInfoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAuthorVideoInfoListResult)
		realResult.Success = success
	}
	return nil
}
func newGetAuthorVideoInfoListArgs() interface{} {
	return &GetAuthorVideoInfoListArgs{}
}

func newGetAuthorVideoInfoListResult() interface{} {
	return &GetAuthorVideoInfoListResult{}
}

type GetAuthorVideoInfoListArgs struct {
	Req *api.VideoInfoGetAuthorVideoInfoListRequest
}

func (p *GetAuthorVideoInfoListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.VideoInfoGetAuthorVideoInfoListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAuthorVideoInfoListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAuthorVideoInfoListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAuthorVideoInfoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAuthorVideoInfoListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAuthorVideoInfoListArgs) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetAuthorVideoInfoListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAuthorVideoInfoListArgs_Req_DEFAULT *api.VideoInfoGetAuthorVideoInfoListRequest

func (p *GetAuthorVideoInfoListArgs) GetReq() *api.VideoInfoGetAuthorVideoInfoListRequest {
	if !p.IsSetReq() {
		return GetAuthorVideoInfoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAuthorVideoInfoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAuthorVideoInfoListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAuthorVideoInfoListResult struct {
	Success *api.VideoInfoGetAuthorVideoInfoListResponse
}

var GetAuthorVideoInfoListResult_Success_DEFAULT *api.VideoInfoGetAuthorVideoInfoListResponse

func (p *GetAuthorVideoInfoListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.VideoInfoGetAuthorVideoInfoListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAuthorVideoInfoListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAuthorVideoInfoListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAuthorVideoInfoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAuthorVideoInfoListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAuthorVideoInfoListResult) Unmarshal(in []byte) error {
	msg := new(api.VideoInfoGetAuthorVideoInfoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAuthorVideoInfoListResult) GetSuccess() *api.VideoInfoGetAuthorVideoInfoListResponse {
	if !p.IsSetSuccess() {
		return GetAuthorVideoInfoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAuthorVideoInfoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.VideoInfoGetAuthorVideoInfoListResponse)
}

func (p *GetAuthorVideoInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAuthorVideoInfoListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideoInfoList(ctx context.Context, Req *api.VideoInfoGetVideoInfoListRequest) (r *api.VideoInfoGetVideoInfoListResponse, err error) {
	var _args GetVideoInfoListArgs
	_args.Req = Req
	var _result GetVideoInfoListResult
	if err = p.c.Call(ctx, "getVideoInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfo(ctx context.Context, Req *api.VideoInfoGetVideoInfoRequest) (r *api.VideoInfoGetVideoInfoResponse, err error) {
	var _args GetVideoInfoArgs
	_args.Req = Req
	var _result GetVideoInfoResult
	if err = p.c.Call(ctx, "getVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeed(ctx context.Context, Req *api.VideoInfoGetFeedRequest) (r *api.VideoInfoGetFeedResponse, err error) {
	var _args GetFeedArgs
	_args.Req = Req
	var _result GetFeedResult
	if err = p.c.Call(ctx, "getFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthorVideoInfoList(ctx context.Context, Req *api.VideoInfoGetAuthorVideoInfoListRequest) (r *api.VideoInfoGetAuthorVideoInfoListResponse, err error) {
	var _args GetAuthorVideoInfoListArgs
	_args.Req = Req
	var _result GetAuthorVideoInfoListResult
	if err = p.c.Call(ctx, "getAuthorVideoInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
