// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: favoriteModel.proto

package api

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FavoriteModelQueryVideoFavoriteCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *FavoriteModelQueryVideoFavoriteCountRequest) Reset() {
	*x = FavoriteModelQueryVideoFavoriteCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryVideoFavoriteCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryVideoFavoriteCountRequest) ProtoMessage() {}

func (x *FavoriteModelQueryVideoFavoriteCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryVideoFavoriteCountRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryVideoFavoriteCountRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{0}
}

func (x *FavoriteModelQueryVideoFavoriteCountRequest) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type FavoriteModelQueryVideoFavoriteCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg          *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	VideoFavoriteCount int64   `protobuf:"varint,3,opt,name=video_favorite_count,json=videoFavoriteCount,proto3" json:"video_favorite_count,omitempty"`
}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) Reset() {
	*x = FavoriteModelQueryVideoFavoriteCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryVideoFavoriteCountResponse) ProtoMessage() {}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryVideoFavoriteCountResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryVideoFavoriteCountResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{1}
}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryVideoFavoriteCountResponse) GetVideoFavoriteCount() int64 {
	if x != nil {
		return x.VideoFavoriteCount
	}
	return 0
}

type FavoriteModelQueryVideoFavoriteCountListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoIdList []int64 `protobuf:"varint,1,rep,packed,name=video_id_list,json=videoIdList,proto3" json:"video_id_list,omitempty"`
}

func (x *FavoriteModelQueryVideoFavoriteCountListRequest) Reset() {
	*x = FavoriteModelQueryVideoFavoriteCountListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryVideoFavoriteCountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryVideoFavoriteCountListRequest) ProtoMessage() {}

func (x *FavoriteModelQueryVideoFavoriteCountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryVideoFavoriteCountListRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryVideoFavoriteCountListRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{2}
}

func (x *FavoriteModelQueryVideoFavoriteCountListRequest) GetVideoIdList() []int64 {
	if x != nil {
		return x.VideoIdList
	}
	return nil
}

type FavoriteModelQueryVideoFavoriteCountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode             int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg              *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	VideoFavoriteCountList []int64 `protobuf:"varint,3,rep,packed,name=video_favorite_count_list,json=videoFavoriteCountList,proto3" json:"video_favorite_count_list,omitempty"`
}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) Reset() {
	*x = FavoriteModelQueryVideoFavoriteCountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryVideoFavoriteCountListResponse) ProtoMessage() {}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryVideoFavoriteCountListResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryVideoFavoriteCountListResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{3}
}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryVideoFavoriteCountListResponse) GetVideoFavoriteCountList() []int64 {
	if x != nil {
		return x.VideoFavoriteCountList
	}
	return nil
}

type FavoriteModelQueryIsUserFavoriteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoIdList []int64 `protobuf:"varint,2,rep,packed,name=video_id_list,json=videoIdList,proto3" json:"video_id_list,omitempty"`
}

func (x *FavoriteModelQueryIsUserFavoriteListRequest) Reset() {
	*x = FavoriteModelQueryIsUserFavoriteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryIsUserFavoriteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryIsUserFavoriteListRequest) ProtoMessage() {}

func (x *FavoriteModelQueryIsUserFavoriteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryIsUserFavoriteListRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryIsUserFavoriteListRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{4}
}

func (x *FavoriteModelQueryIsUserFavoriteListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavoriteModelQueryIsUserFavoriteListRequest) GetVideoIdList() []int64 {
	if x != nil {
		return x.VideoIdList
	}
	return nil
}

type FavoriteModelQueryIsUserFavoriteListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg          *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	IsUserFavoriteList []bool  `protobuf:"varint,3,rep,packed,name=is_user_favorite_list,json=isUserFavoriteList,proto3" json:"is_user_favorite_list,omitempty"`
}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) Reset() {
	*x = FavoriteModelQueryIsUserFavoriteListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryIsUserFavoriteListResponse) ProtoMessage() {}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryIsUserFavoriteListResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryIsUserFavoriteListResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{5}
}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryIsUserFavoriteListResponse) GetIsUserFavoriteList() []bool {
	if x != nil {
		return x.IsUserFavoriteList
	}
	return nil
}

type FavoriteModelQueryIsUserFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId int64 `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *FavoriteModelQueryIsUserFavoriteRequest) Reset() {
	*x = FavoriteModelQueryIsUserFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryIsUserFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryIsUserFavoriteRequest) ProtoMessage() {}

func (x *FavoriteModelQueryIsUserFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryIsUserFavoriteRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryIsUserFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{6}
}

func (x *FavoriteModelQueryIsUserFavoriteRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavoriteModelQueryIsUserFavoriteRequest) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type FavoriteModelQueryIsUserFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode     int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg      *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	IsUserFavorite []bool  `protobuf:"varint,3,rep,packed,name=is_user_favorite,json=isUserFavorite,proto3" json:"is_user_favorite,omitempty"`
}

func (x *FavoriteModelQueryIsUserFavoriteResponse) Reset() {
	*x = FavoriteModelQueryIsUserFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryIsUserFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryIsUserFavoriteResponse) ProtoMessage() {}

func (x *FavoriteModelQueryIsUserFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryIsUserFavoriteResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryIsUserFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{7}
}

func (x *FavoriteModelQueryIsUserFavoriteResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryIsUserFavoriteResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryIsUserFavoriteResponse) GetIsUserFavorite() []bool {
	if x != nil {
		return x.IsUserFavorite
	}
	return nil
}

type FavoriteModelQueryUserFavoriteCountListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLdList []int64 `protobuf:"varint,1,rep,packed,name=user_ld_list,json=userLdList,proto3" json:"user_ld_list,omitempty"`
}

func (x *FavoriteModelQueryUserFavoriteCountListRequest) Reset() {
	*x = FavoriteModelQueryUserFavoriteCountListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryUserFavoriteCountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryUserFavoriteCountListRequest) ProtoMessage() {}

func (x *FavoriteModelQueryUserFavoriteCountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryUserFavoriteCountListRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryUserFavoriteCountListRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{8}
}

func (x *FavoriteModelQueryUserFavoriteCountListRequest) GetUserLdList() []int64 {
	if x != nil {
		return x.UserLdList
	}
	return nil
}

type FavoriteModelQueryUserFavoriteCountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg          *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	TotalFavoritedList []int64 `protobuf:"varint,3,rep,packed,name=total_favorited_list,json=totalFavoritedList,proto3" json:"total_favorited_list,omitempty"`
	FavoriteCountList  []int64 `protobuf:"varint,4,rep,packed,name=favorite_count_list,json=favoriteCountList,proto3" json:"favorite_count_list,omitempty"`
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) Reset() {
	*x = FavoriteModelQueryUserFavoriteCountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryUserFavoriteCountListResponse) ProtoMessage() {}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryUserFavoriteCountListResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryUserFavoriteCountListResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{9}
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) GetTotalFavoritedList() []int64 {
	if x != nil {
		return x.TotalFavoritedList
	}
	return nil
}

func (x *FavoriteModelQueryUserFavoriteCountListResponse) GetFavoriteCountList() []int64 {
	if x != nil {
		return x.FavoriteCountList
	}
	return nil
}

type FavoriteModelQueryUserFavoriteCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLd []int64 `protobuf:"varint,1,rep,packed,name=user_ld,json=userLd,proto3" json:"user_ld,omitempty"`
}

func (x *FavoriteModelQueryUserFavoriteCountRequest) Reset() {
	*x = FavoriteModelQueryUserFavoriteCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryUserFavoriteCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryUserFavoriteCountRequest) ProtoMessage() {}

func (x *FavoriteModelQueryUserFavoriteCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryUserFavoriteCountRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryUserFavoriteCountRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{10}
}

func (x *FavoriteModelQueryUserFavoriteCountRequest) GetUserLd() []int64 {
	if x != nil {
		return x.UserLd
	}
	return nil
}

type FavoriteModelQueryUserFavoriteCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode     int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg      *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	TotalFavorited []int64 `protobuf:"varint,3,rep,packed,name=total_favorited,json=totalFavorited,proto3" json:"total_favorited,omitempty"`
	FavoriteCount  []int64 `protobuf:"varint,4,rep,packed,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) Reset() {
	*x = FavoriteModelQueryUserFavoriteCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryUserFavoriteCountResponse) ProtoMessage() {}

func (x *FavoriteModelQueryUserFavoriteCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryUserFavoriteCountResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryUserFavoriteCountResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{11}
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) GetTotalFavorited() []int64 {
	if x != nil {
		return x.TotalFavorited
	}
	return nil
}

func (x *FavoriteModelQueryUserFavoriteCountResponse) GetFavoriteCount() []int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return nil
}

type FavoriteModelFavoriteActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId    int64 `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	AuthorId   int64 `protobuf:"varint,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ActionType int32 `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
}

func (x *FavoriteModelFavoriteActionRequest) Reset() {
	*x = FavoriteModelFavoriteActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelFavoriteActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelFavoriteActionRequest) ProtoMessage() {}

func (x *FavoriteModelFavoriteActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelFavoriteActionRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelFavoriteActionRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{12}
}

func (x *FavoriteModelFavoriteActionRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavoriteModelFavoriteActionRequest) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *FavoriteModelFavoriteActionRequest) GetAuthorId() int64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *FavoriteModelFavoriteActionRequest) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

type FavoriteModelFavoriteActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg  *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
}

func (x *FavoriteModelFavoriteActionResponse) Reset() {
	*x = FavoriteModelFavoriteActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelFavoriteActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelFavoriteActionResponse) ProtoMessage() {}

func (x *FavoriteModelFavoriteActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelFavoriteActionResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelFavoriteActionResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{13}
}

func (x *FavoriteModelFavoriteActionResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelFavoriteActionResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

type FavoriteModelQueryFavoriteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FavoriteModelQueryFavoriteListRequest) Reset() {
	*x = FavoriteModelQueryFavoriteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryFavoriteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryFavoriteListRequest) ProtoMessage() {}

func (x *FavoriteModelQueryFavoriteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryFavoriteListRequest.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryFavoriteListRequest) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{14}
}

func (x *FavoriteModelQueryFavoriteListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FavoriteModelQueryFavoriteListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode  int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // 状态码，0-成功，其他值-失败
	StatusMsg   *string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"` // 返回状态描述
	VideoIdList []int64 `protobuf:"varint,3,rep,packed,name=video_id_list,json=videoIdList,proto3" json:"video_id_list,omitempty"`
}

func (x *FavoriteModelQueryFavoriteListResponse) Reset() {
	*x = FavoriteModelQueryFavoriteListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteModel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteModelQueryFavoriteListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteModelQueryFavoriteListResponse) ProtoMessage() {}

func (x *FavoriteModelQueryFavoriteListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteModel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteModelQueryFavoriteListResponse.ProtoReflect.Descriptor instead.
func (*FavoriteModelQueryFavoriteListResponse) Descriptor() ([]byte, []int) {
	return file_favoriteModel_proto_rawDescGZIP(), []int{15}
}

func (x *FavoriteModelQueryFavoriteListResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteModelQueryFavoriteListResponse) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *FavoriteModelQueryFavoriteListResponse) GetVideoIdList() []int64 {
	if x != nil {
		return x.VideoIdList
	}
	return nil
}

var File_favoriteModel_proto protoreflect.FileDescriptor

var file_favoriteModel_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4e, 0x0a, 0x31, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x32,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x36, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x37, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x22, 0x71, 0x0a, 0x32, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x33, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x73, 0x67, 0x22, 0x63, 0x0a, 0x2d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x2e, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x59, 0x0a, 0x35, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x36, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x4b, 0x0a, 0x30, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x31, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x9a, 0x01, 0x0a,
	0x26, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x27, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x2a, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xa5, 0x01, 0x0a, 0x2b, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x32, 0xe5, 0x08, 0x0a, 0x14, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x78, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9a, 0x01, 0x0a, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x17,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x22, 0x5a, 0x20, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favoriteModel_proto_rawDescOnce sync.Once
	file_favoriteModel_proto_rawDescData = file_favoriteModel_proto_rawDesc
)

func file_favoriteModel_proto_rawDescGZIP() []byte {
	file_favoriteModel_proto_rawDescOnce.Do(func() {
		file_favoriteModel_proto_rawDescData = protoimpl.X.CompressGZIP(file_favoriteModel_proto_rawDescData)
	})
	return file_favoriteModel_proto_rawDescData
}

var file_favoriteModel_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_favoriteModel_proto_goTypes = []interface{}{
	(*FavoriteModelQueryVideoFavoriteCountRequest)(nil),      // 0: core.favorite_model_query_video_favorite_count_request
	(*FavoriteModelQueryVideoFavoriteCountResponse)(nil),     // 1: core.favorite_model_query_video_favorite_count_response
	(*FavoriteModelQueryVideoFavoriteCountListRequest)(nil),  // 2: core.favorite_model_query_video_favorite_count_list_request
	(*FavoriteModelQueryVideoFavoriteCountListResponse)(nil), // 3: core.favorite_model_query_video_favorite_count_list_response
	(*FavoriteModelQueryIsUserFavoriteListRequest)(nil),      // 4: core.favorite_model_query_is_user_favorite_list_request
	(*FavoriteModelQueryIsUserFavoriteListResponse)(nil),     // 5: core.favorite_model_query_is_user_favorite_list_response
	(*FavoriteModelQueryIsUserFavoriteRequest)(nil),          // 6: core.favorite_model_query_is_user_favorite_request
	(*FavoriteModelQueryIsUserFavoriteResponse)(nil),         // 7: core.favorite_model_query_is_user_favorite_response
	(*FavoriteModelQueryUserFavoriteCountListRequest)(nil),   // 8: core.favorite_model_query_user_favorite_count_list_request
	(*FavoriteModelQueryUserFavoriteCountListResponse)(nil),  // 9: core.favorite_model_query_user_favorite_count_list_response
	(*FavoriteModelQueryUserFavoriteCountRequest)(nil),       // 10: core.favorite_model_query_user_favorite_count_request
	(*FavoriteModelQueryUserFavoriteCountResponse)(nil),      // 11: core.favorite_model_query_user_favorite_count_response
	(*FavoriteModelFavoriteActionRequest)(nil),               // 12: core.favorite_model_favorite_action_request
	(*FavoriteModelFavoriteActionResponse)(nil),              // 13: core.favorite_model_favorite_action_response
	(*FavoriteModelQueryFavoriteListRequest)(nil),            // 14: core.favorite_model_query_favorite_list_request
	(*FavoriteModelQueryFavoriteListResponse)(nil),           // 15: core.favorite_model_query_favorite_list_response
}
var file_favoriteModel_proto_depIdxs = []int32{
	14, // 0: core.favoriteModelService.queryFavoriteList:input_type -> core.favorite_model_query_favorite_list_request
	12, // 1: core.favoriteModelService.favoriteAction:input_type -> core.favorite_model_favorite_action_request
	10, // 2: core.favoriteModelService.queryUserFavoriteCount:input_type -> core.favorite_model_query_user_favorite_count_request
	8,  // 3: core.favoriteModelService.queryUserFavoriteCountList:input_type -> core.favorite_model_query_user_favorite_count_list_request
	2,  // 4: core.favoriteModelService.queryVideoFavoriteCountList:input_type -> core.favorite_model_query_video_favorite_count_list_request
	0,  // 5: core.favoriteModelService.queryVideoFavoriteCount:input_type -> core.favorite_model_query_video_favorite_count_request
	4,  // 6: core.favoriteModelService.queryIsUserFavoriteList:input_type -> core.favorite_model_query_is_user_favorite_list_request
	6,  // 7: core.favoriteModelService.queryIsUserFavorite:input_type -> core.favorite_model_query_is_user_favorite_request
	15, // 8: core.favoriteModelService.queryFavoriteList:output_type -> core.favorite_model_query_favorite_list_response
	13, // 9: core.favoriteModelService.favoriteAction:output_type -> core.favorite_model_favorite_action_response
	11, // 10: core.favoriteModelService.queryUserFavoriteCount:output_type -> core.favorite_model_query_user_favorite_count_response
	9,  // 11: core.favoriteModelService.queryUserFavoriteCountList:output_type -> core.favorite_model_query_user_favorite_count_list_response
	3,  // 12: core.favoriteModelService.queryVideoFavoriteCountList:output_type -> core.favorite_model_query_video_favorite_count_list_response
	1,  // 13: core.favoriteModelService.queryVideoFavoriteCount:output_type -> core.favorite_model_query_video_favorite_count_response
	5,  // 14: core.favoriteModelService.queryIsUserFavoriteList:output_type -> core.favorite_model_query_is_user_favorite_list_response
	7,  // 15: core.favoriteModelService.queryIsUserFavorite:output_type -> core.favorite_model_query_is_user_favorite_response
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_favoriteModel_proto_init() }
func file_favoriteModel_proto_init() {
	if File_favoriteModel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favoriteModel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryVideoFavoriteCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryVideoFavoriteCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryVideoFavoriteCountListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryVideoFavoriteCountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryIsUserFavoriteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryIsUserFavoriteListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryIsUserFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryIsUserFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryUserFavoriteCountListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryUserFavoriteCountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryUserFavoriteCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryUserFavoriteCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelFavoriteActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelFavoriteActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryFavoriteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteModel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteModelQueryFavoriteListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_favoriteModel_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_favoriteModel_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favoriteModel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favoriteModel_proto_goTypes,
		DependencyIndexes: file_favoriteModel_proto_depIdxs,
		MessageInfos:      file_favoriteModel_proto_msgTypes,
	}.Build()
	File_favoriteModel_proto = out.File
	file_favoriteModel_proto_rawDesc = nil
	file_favoriteModel_proto_goTypes = nil
	file_favoriteModel_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.6.2. DO NOT EDIT.

type FavoriteModelService interface {
	QueryFavoriteList(ctx context.Context, req *FavoriteModelQueryFavoriteListRequest) (res *FavoriteModelQueryFavoriteListResponse, err error)
	FavoriteAction(ctx context.Context, req *FavoriteModelFavoriteActionRequest) (res *FavoriteModelFavoriteActionResponse, err error)
	QueryUserFavoriteCount(ctx context.Context, req *FavoriteModelQueryUserFavoriteCountRequest) (res *FavoriteModelQueryUserFavoriteCountResponse, err error)
	QueryUserFavoriteCountList(ctx context.Context, req *FavoriteModelQueryUserFavoriteCountListRequest) (res *FavoriteModelQueryUserFavoriteCountListResponse, err error)
	QueryVideoFavoriteCountList(ctx context.Context, req *FavoriteModelQueryVideoFavoriteCountListRequest) (res *FavoriteModelQueryVideoFavoriteCountListResponse, err error)
	QueryVideoFavoriteCount(ctx context.Context, req *FavoriteModelQueryVideoFavoriteCountRequest) (res *FavoriteModelQueryVideoFavoriteCountResponse, err error)
	QueryIsUserFavoriteList(ctx context.Context, req *FavoriteModelQueryIsUserFavoriteListRequest) (res *FavoriteModelQueryIsUserFavoriteListResponse, err error)
	QueryIsUserFavorite(ctx context.Context, req *FavoriteModelQueryIsUserFavoriteRequest) (res *FavoriteModelQueryIsUserFavoriteResponse, err error)
}
